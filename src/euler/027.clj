(ns euler.027
  (:require [euler.prime :refer (prime?)]))

(defn square [x] (* x x))

(defn quadratic-formula [a b]
  (fn [n]
    (+ (square n) (* a n) b)))

(defn primes-generated
  "Determines the number of consecutive prime numbers generated by a quadratic
   formula for values of n, starting with n = 0.

   (In other words, the lowest value of n that does not return a prime number.)"
  [a b]
  (let [formula (quadratic-formula a b)]
    (first (drop-while (fn [n] (prime? (Math/abs (formula n)))) (range)))))

(defrecord Winner [a b primes-generated])

(def solution
  (reduce (fn [winner [a b]]
            (let [pg (primes-generated a b)]
              (if (> pg (:primes-generated winner))
                (Winner. a b pg)
                winner)))
          (Winner. nil nil 0)
          (for [a (range -999 1000)
                b (range -999 1000)]
            [a b])))

(let [{:keys [a b]} solution]
  (* a b))
